"use strict";var TcHmi,__runInitializers=this&&this.__runInitializers||function(thisArg,initializers,value){for(var useValue=arguments.length>2,i=0;i<initializers.length;i++)value=useValue?initializers[i].call(thisArg,value):initializers[i].call(thisArg);return useValue?value:void 0},__esDecorate=this&&this.__esDecorate||function(ctor,descriptorIn,decorators,contextIn,initializers,extraInitializers){function accept(f){if(void 0!==f&&"function"!=typeof f)throw new TypeError("Function expected");return f}for(var _,kind=contextIn.kind,key="getter"===kind?"get":"setter"===kind?"set":"value",target=!descriptorIn&&ctor?contextIn.static?ctor:ctor.prototype:null,descriptor=descriptorIn||(target?Object.getOwnPropertyDescriptor(target,contextIn.name):{}),done=!1,i=decorators.length-1;i>=0;i--){var context={};for(var p in contextIn)context[p]="access"===p?{}:contextIn[p];for(var p in contextIn.access)context.access[p]=contextIn.access[p];context.addInitializer=function(f){if(done)throw new TypeError("Cannot add initializers after decoration has completed");extraInitializers.push(accept(f||null))};var result=(0,decorators[i])("accessor"===kind?{get:descriptor.get,set:descriptor.set}:descriptor[key],context);if("accessor"===kind){if(void 0===result)continue;if(null===result||"object"!=typeof result)throw new TypeError("Object expected");(_=accept(result.get))&&(descriptor.get=_),(_=accept(result.set))&&(descriptor.set=_),(_=accept(result.init))&&initializers.unshift(_)}else(_=accept(result))&&("field"===kind?initializers.unshift(_):descriptor[key]=_)}target&&Object.defineProperty(target,contextIn.name,descriptor),done=!0};!function(TcHmi){!function(Controls){!function(Beckhoff){!function(Industries){!function(Common){let TcHmiRotarySwitch=(()=>{let ___onPropertyIsEnabledChanged_decorators,___onMouseDown_decorators,___onMouseUp_decorators,___onMouseEnter_decorators,___onMouseLeave_decorators,___onTouchStart_decorators,___onTouchEndOrCancel_decorators,___onResolverForInactiveColorWatchCallback_decorators,___onResolverForActiveColorWatchCallback_decorators,_classSuper=TcHmi.Controls.Beckhoff.TcHmiButton,_instanceExtraInitializers=[];return class TcHmiRotarySwitch extends _classSuper{static{const _metadata="function"==typeof Symbol&&Symbol.metadata?Object.create(_classSuper[Symbol.metadata]??null):void 0;___onPropertyIsEnabledChanged_decorators=[TcHmi.EventHandler()],___onMouseDown_decorators=[TcHmi.EventHandler({checkIsEnabled:!0,checkIsReadOnly:!0,checkAccess:"operate"})],___onMouseUp_decorators=[TcHmi.EventHandler({checkIsEnabled:!0,checkIsReadOnly:!0,checkAccess:"operate"})],___onMouseEnter_decorators=[TcHmi.EventHandler()],___onMouseLeave_decorators=[TcHmi.EventHandler()],___onTouchStart_decorators=[TcHmi.EventHandler({checkIsEnabled:!0,checkIsReadOnly:!0,checkAccess:"operate"})],___onTouchEndOrCancel_decorators=[TcHmi.EventHandler({checkIsEnabled:!0,checkIsReadOnly:!0,checkAccess:"operate"})],___onResolverForInactiveColorWatchCallback_decorators=[TcHmi.CallbackMethod],___onResolverForActiveColorWatchCallback_decorators=[TcHmi.CallbackMethod],__esDecorate(this,null,___onPropertyIsEnabledChanged_decorators,{kind:"method",name:"__onPropertyIsEnabledChanged",static:!1,private:!1,access:{has:obj=>"__onPropertyIsEnabledChanged"in obj,get:obj=>obj.__onPropertyIsEnabledChanged},metadata:_metadata},null,_instanceExtraInitializers),__esDecorate(this,null,___onMouseDown_decorators,{kind:"method",name:"__onMouseDown",static:!1,private:!1,access:{has:obj=>"__onMouseDown"in obj,get:obj=>obj.__onMouseDown},metadata:_metadata},null,_instanceExtraInitializers),__esDecorate(this,null,___onMouseUp_decorators,{kind:"method",name:"__onMouseUp",static:!1,private:!1,access:{has:obj=>"__onMouseUp"in obj,get:obj=>obj.__onMouseUp},metadata:_metadata},null,_instanceExtraInitializers),__esDecorate(this,null,___onMouseEnter_decorators,{kind:"method",name:"__onMouseEnter",static:!1,private:!1,access:{has:obj=>"__onMouseEnter"in obj,get:obj=>obj.__onMouseEnter},metadata:_metadata},null,_instanceExtraInitializers),__esDecorate(this,null,___onMouseLeave_decorators,{kind:"method",name:"__onMouseLeave",static:!1,private:!1,access:{has:obj=>"__onMouseLeave"in obj,get:obj=>obj.__onMouseLeave},metadata:_metadata},null,_instanceExtraInitializers),__esDecorate(this,null,___onTouchStart_decorators,{kind:"method",name:"__onTouchStart",static:!1,private:!1,access:{has:obj=>"__onTouchStart"in obj,get:obj=>obj.__onTouchStart},metadata:_metadata},null,_instanceExtraInitializers),__esDecorate(this,null,___onTouchEndOrCancel_decorators,{kind:"method",name:"__onTouchEndOrCancel",static:!1,private:!1,access:{has:obj=>"__onTouchEndOrCancel"in obj,get:obj=>obj.__onTouchEndOrCancel},metadata:_metadata},null,_instanceExtraInitializers),__esDecorate(this,null,___onResolverForInactiveColorWatchCallback_decorators,{kind:"method",name:"__onResolverForInactiveColorWatchCallback",static:!1,private:!1,access:{has:obj=>"__onResolverForInactiveColorWatchCallback"in obj,get:obj=>obj.__onResolverForInactiveColorWatchCallback},metadata:_metadata},null,_instanceExtraInitializers),__esDecorate(this,null,___onResolverForActiveColorWatchCallback_decorators,{kind:"method",name:"__onResolverForActiveColorWatchCallback",static:!1,private:!1,access:{has:obj=>"__onResolverForActiveColorWatchCallback"in obj,get:obj=>obj.__onResolverForActiveColorWatchCallback},metadata:_metadata},null,_instanceExtraInitializers),_metadata&&Object.defineProperty(this,Symbol.metadata,{enumerable:!0,configurable:!0,writable:!0,value:_metadata})}static#tchmiFQN="TcHmi.Controls.Beckhoff.Industries.Common."+this.name;constructor(element,pcElement,attrs){super(element,pcElement,attrs)}__tapMode=__runInitializers(this,_instanceExtraInitializers);__lastActivatedTapMode;__inactiveColor;__activeColor;__previnit(){super.__previnit()}__init(){super.__init()}__attach(){super.__attach(),this.__lastActivatedTapMode="Toggle"}__detach(){super.__detach()}destroy(){this.__keepAlive||super.destroy()}__setInternalState(state,source){"Tap"!==this.__tapMode?this.__state!==state?super.__setInternalState(state,source):this.__setIsDown(this.__state):super.__setInternalState(state,source)}__onPropertyIsEnabledChanged(_event,data){data&&(this.getIsEnabled()?!this.__destroyStateSymbolWatch&&this.__stateSymbol&&(this.__destroyStateSymbolWatch=this.__stateSymbol.watch(this.__onStateSymbolWatch)):(this.__mousedown=!1,this.__stateLock=!1,this.__touches=[],this.__destroyStateSymbolWatch&&(this.__destroyStateSymbolWatch(),this.__destroyStateSymbolWatch=null)))}__onMouseDown(event){"Tap"!==this.__tapMode?this.__touchLock||0===event.button&&(this.__mousedown=!0,this.__stateLock||(this.__stateLock=!0,this.__writeState(!this.__state,"userInteraction"))):super.__onMouseDown(event)}__onMouseUp(event){"Tap"!==this.__tapMode?this.__touchLock||0===event.button&&this.__mousedown&&(this.__mousedown=!1,this.__stateLock=!1):super.__onMouseUp(event)}__onMouseEnter(event){"Tap"!==this.__tapMode||super.__onMouseEnter(event)}__onMouseLeave(event){"Tap"!==this.__tapMode?this.__mousedown&&(1!==event.buttons&&(this.__mousedown=!1),this.getIsEnabled()&&!this.__isReadOnly&&TcHmi.Access.checkAccess(this,"operate")&&(this.__mousedown=!1,this.__stateLock=!1)):super.__onMouseLeave(event)}__onTouchStart(event){if("Tap"===this.__tapMode)return void super.__onTouchStart(event);let changedTouches=Array.from(event.changedTouches).filter((touch=>touch.target===event.target));0!==changedTouches.length&&(this.__touches=this.__touches.concat(changedTouches),this.__stateLock||(this.__stateLock=!0,this.__writeState(!this.__state,"userInteraction")),this.__touchLockTimeoutId&&(clearTimeout(this.__touchLockTimeoutId),this.__touchLockTimeoutId=0),this.__touchLock=!0)}__onTouchEndOrCancel(event){if("Tap"===this.__tapMode)return void super.__onTouchEndOrCancel(event);if(0===this.__touches.length)return;const activeTouchIds=Array.from(event.touches).map((touch=>touch.identifier));this.__touches=this.__touches.filter((touch=>activeTouchIds.includes(touch.identifier))),0===this.__touches.length&&(this.__stateLock=!1),this.__touchLockTimeoutId&&(clearTimeout(this.__touchLockTimeoutId),this.__touchLockTimeoutId=0),this.__touchLockTimeoutId=setTimeout((()=>{this.__touchLock=!1}),500)}setTapMode(valueNew){const convertedValue=TcHmi.ValueConverter.toEnum(valueNew,{Toggle:"Toggle",Tap:"Tap"})??this.getAttributeDefaultValueInternal("TapMode");convertedValue!==this.__tapMode&&(this.__tapMode=convertedValue,TcHmi.EventProvider.raise(this.__id+".onPropertyChanged",{propertyName:"TapMode"}))}getTapMode(){return this.__tapMode}setInactiveColor(valueNew){let convertedValue=TcHmi.ValueConverter.toObject(valueNew);null===convertedValue&&(convertedValue=this.getAttributeDefaultValueInternal("InactiveColor"));let resolverInfo=this.__objectResolvers.get("inactiveColor");resolverInfo&&(resolverInfo.watchDestroyer&&resolverInfo.watchDestroyer(),resolverInfo.resolver.destroy());let resolver=new TcHmi.Symbol.ObjectResolver(convertedValue,{parentControl:this,type:this.getAttributeDescription("InactiveColor")?.type});this.__objectResolvers.set("inactiveColor",{resolver,watchCallback:this.__onResolverForInactiveColorWatchCallback,watchDestroyer:resolver.watch(this.__onResolverForInactiveColorWatchCallback)})}__onResolverForInactiveColorWatchCallback(data){this.__isAttached||this.__suspendObjectResolver("inactiveColor"),data.error===TcHmi.Errors.NONE?tchmi_equal(data.value,this.__inactiveColor)||(this.__inactiveColor=data.value,TcHmi.EventProvider.raise(this.__id+".onPropertyChanged",{propertyName:"InactiveColor"}),this.__processInactiveColor()):TcHmi.Log.Controls.error(this,TcHmiRotarySwitch.#tchmiFQN,{Attribute:"InactiveColor"},`Resolving symbols from object failed with error: ${TcHmi.Log.buildMessage(data.details)}`)}getInactiveColor(){return this.__inactiveColor}__processInactiveColor(){TcHmi.isSolidColor(this.__inactiveColor)?this.__element[0].style.setProperty("--tchmi-indicator-color-inactive",TcHmi.StyleProvider.resolveSolidColorAsCssValue(this.__inactiveColor)):this.__element[0].style.removeProperty("--tchmi-indicator-color-inactive")}setActiveColor(valueNew){let convertedValue=TcHmi.ValueConverter.toObject(valueNew);null===convertedValue&&(convertedValue=this.getAttributeDefaultValueInternal("ActiveColor"));let resolverInfo=this.__objectResolvers.get("activeColor");resolverInfo&&(resolverInfo.watchDestroyer&&resolverInfo.watchDestroyer(),resolverInfo.resolver.destroy());let resolver=new TcHmi.Symbol.ObjectResolver(convertedValue,{parentControl:this,type:this.getAttributeDescription("ActiveColor")?.type});this.__objectResolvers.set("activeColor",{resolver,watchCallback:this.__onResolverForActiveColorWatchCallback,watchDestroyer:resolver.watch(this.__onResolverForActiveColorWatchCallback)})}__onResolverForActiveColorWatchCallback(data){this.__isAttached||this.__suspendObjectResolver("activeColor"),data.error===TcHmi.Errors.NONE?tchmi_equal(data.value,this.__activeColor)||(this.__activeColor=data.value,TcHmi.EventProvider.raise(this.__id+".onPropertyChanged",{propertyName:"ActiveColor"}),this.__processActiveColor()):TcHmi.Log.Controls.error(this,TcHmiRotarySwitch.#tchmiFQN,{Attribute:"ActiveColor"},`Resolving symbols from object failed with error: ${TcHmi.Log.buildMessage(data.details)}`)}getActiveColor(){return this.__activeColor}__processActiveColor(){TcHmi.isSolidColor(this.__activeColor)?this.__element[0].style.setProperty("--tchmi-indicator-color-active",TcHmi.StyleProvider.resolveSolidColorAsCssValue(this.__activeColor)):this.__element[0].style.removeProperty("--tchmi-indicator-color-active")}}})();Common.TcHmiRotarySwitch=TcHmiRotarySwitch}(Industries.Common||(Industries.Common={}))}(Beckhoff.Industries||(Beckhoff.Industries={}))}(Controls.Beckhoff||(Controls.Beckhoff={}))}(TcHmi.Controls||(TcHmi.Controls={}))}(TcHmi||(TcHmi={})),TcHmi.Controls.registerEx("TcHmiRotarySwitch","TcHmi.Controls.Beckhoff.Industries.Common",TcHmi.Controls.Beckhoff.Industries.Common.TcHmiRotarySwitch);